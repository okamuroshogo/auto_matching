# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: auto-matching

custom:
  defaultStage: prod
  pythonRequirements:
    dockerizePip: true
  dynamodb:
    ttl:
      - table: "tweets-${self:provider.stage}" 
        field: ttl



plugins:
  - serverless-python-requirements
  - serverless-dynamodb-ttl


provider:
  name: aws
  runtime: nodejs6.10
  profile: auto_matching

  stage: ${opt:stage, self:custom.defaultStage}
  region: ap-northeast-1
  memorySize: 128
  timeout: 10

  environment:
    HOT_API_KEY: e6c49da7695c8fc5
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:GetItem
        - dynamodb:DescribeTable
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:Query
        - dynamodb:DeleteItem
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:*
      Resource: "arn:aws:s3:::kamatte.cc/*"


package:
  exclude:
    - .serverless
    - .webpack
    - coverage
    - .babelrc
    - .gitignore
    - LICENSE
    - package.json
    - README.md
    - serverless.yml
    - webpack.config.js

functions:
  getTweetMan:
    handler: functions/get_tweet_man/handler.getTweetMan
    timeout: 300
    events:
      - schedule: cron(0/6 * * * ? *)
  getTweetWoman:
    handler: functions/get_tweet_woman/handler.getTweetWoman
    timeout: 300
    events:
      - schedule: cron(0/6 * * * ? *)
  createTweet:
    handler: functions/debug_api/handler.create
  matching:
    handler: functions/matching/handler.createMatching
    timeout: 30
    events:
      - schedule: rate(3 hours)

  reservation:
    handler: functions/twitter/index.handler
    events:
      - http:
          path: api/v1/reservation
          method: post
          cors: true

  twitter_callback:
    handler: functions/twitter_callback/index.handler
    events:
      - http:
          path: twitter/callback
          method: get
          cors: true

  share:
    handler: functions/share/index.handler
    events:
      - http:
          path: share/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true

  likeAPI:
    handler: functions/like/index.handler
    events:
      - http:
          path: api/v1/like
          method: post
          cors: true

  completeAPI:
    handler: functions/complete/index.handler
    events:
      - http:
          path: api/v1/complete
          method: post
          cors: true

  reservationStatusAPI:
    handler: functions/reservation_status/index.handler
    events:
      - http:
          path: api/v1/reservation
          method: get
          cors: true

  matchingCountAPI:
    handler: functions/matching_count/index.handler
    events:
      - http:
          path: api/v1/matching_count
          method: get
          cors: true

  blackListAPI:
    handler: functions/blacklist/index.handler
    events:
      - http:
          path: api/v1/blacklist
          method: post
          cors: true

resources:
  Resources:
    MatchingDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "matching-${self:provider.stage}"

    TweetsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: gender
            AttributeType: N
          -
            AttributeName: tweetID
            AttributeType: S
        KeySchema:
          -
            AttributeName: gender
            KeyType: HASH
          -
            AttributeName: tweetID
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "tweets-${self:provider.stage}"
    TwitterSessionDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: request_token
            AttributeType: S
        KeySchema:
          -
            AttributeName: request_token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "twitter-session-${self:provider.stage}"
    TwitterUsersSessionDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: twiid
            AttributeType: S
        KeySchema:
          -
            AttributeName: twiid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "users-${self:provider.stage}"
    TwitterUserBlackListsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: userID
            AttributeType: S
        KeySchema:
          -
            AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: "twitter-user-black-lists-${self:provider.stage}"
